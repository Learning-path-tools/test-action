name: ðŸ¤–Rockwell Automation Selenium Tests

# Make the workflow only visible when on the JA_codes_support branch
on:
  workflow_dispatch:
    inputs:
      url_index:
        description: 'URL Index (1-20) for testing'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'
          - '9'
          - '10'
          - '11'
          - '12'
          - '13'
          - '14'
          - '15'
          - '16'
          - '17'
          - '18'
          - '19'
          - '20'

jobs:
  run-selenium-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8' # Ensure this matches your project requirement
          cache: 'pip'

      - name: Install Chrome and dependencies
        run: |
          # Add Google Chrome repository key (using recommended gpg method)
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          # Add Google Chrome repository
          sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          # Update package list and install Chrome and jq
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable jq
          # Verify Chrome installation
          google-chrome --version

      - name: Install ChromeDriver using Chrome for Testing (CfT) endpoints
        run: |
          # Get the installed Chrome version
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3)
          echo "Detected Chrome version: $CHROME_VERSION"

          # Construct the URL to get the latest ChromeDriver version for the installed Chrome major version
          # Using last-known-good-versions-with-downloads.json endpoint
          CFT_URL="https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"

          # Fetch the JSON data and extract the ChromeDriver URL for linux64
          CHROMEDRIVER_URL=$(wget -qO- $CFT_URL | jq -r --arg version "$CHROME_VERSION" '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')

          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "Error: Could not find ChromeDriver download URL for Chrome version $CHROME_VERSION"
            # Fallback: Try getting the LATEST_RELEASE for the major version (less reliable)
            CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d '.' -f 1)
            echo "Attempting fallback using LATEST_RELEASE for major version $CHROME_MAJOR_VERSION"
            LATEST_RELEASE_URL="https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION"
            CHROMEDRIVER_VERSION=$(wget -qO- $LATEST_RELEASE_URL)
            if [ -z "$CHROMEDRIVER_VERSION" ]; then
               echo "Fallback failed. Could not determine ChromeDriver version."
               exit 1
            fi
            CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
            echo "Using fallback URL: $CHROMEDRIVER_URL"
          else
             echo "Found ChromeDriver URL using CfT endpoint: $CHROMEDRIVER_URL"
          fi

          # Download ChromeDriver
          echo "Downloading ChromeDriver from $CHROMEDRIVER_URL"
          wget -q "$CHROMEDRIVER_URL" -O chromedriver_linux64.zip
          if [ $? -ne 0 ]; then
             echo "Error downloading ChromeDriver zip file."
             exit 1
          fi

          # Unzip and install
          # Note: The zip file from CfT might contain a directory like 'chromedriver-linux64/'
          unzip chromedriver_linux64.zip
          # Find the executable, handling potential subdirectory
          CHROMEDRIVER_EXEC=$(find . -name chromedriver -type f | head -n 1)
          if [ -z "$CHROMEDRIVER_EXEC" ]; then
             echo "Error: Could not find chromedriver executable after unzipping."
             ls -l # List files for debugging
             exit 1
          fi
          echo "Found ChromeDriver executable at: $CHROMEDRIVER_EXEC"
          sudo mv "$CHROMEDRIVER_EXEC" /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          rm chromedriver_linux64.zip # Clean up zip file
          rm -rf chromedriver-linux64 # Clean up potential extracted directory

          # Verify ChromeDriver installation
          chromedriver --version

      - name: Install Python dependencies
        run: |
          ls
          python -m pip install --upgrade pip
          pip install -r rockwell-automation-Stability-test/requirements.txt
          # Removed pytest-xdist and pytest-github-actions-annotate-failures unless explicitly needed
          # If you need parallel execution, add: pip install pytest-xdist
          # If you need failure annotations, add: pip install pytest-github-actions-annotate-failures

      - name: Run Selenium test with specific URL index
        run: |
          mkdir -p reports/logs
          mkdir -p reports/screenshots
          # Run pytest. Ensure your test files are correctly located.
          # The base directory for the checkout is the root of your repository.
          # If your 'tests' directory is inside 'rockwell-automation-Stability-test', adjust the path:
          echo "data: ${{ github.event.inputs.url_index }}"
          python -m pytest rockwell-automation-Stability-test/tests/test_login.py --url-index=${{ github.event.inputs.url_index }} -v
        env:
            # It's highly recommended to use GitHub Secrets for credentials
            TEST_USERNAME: ${{ secrets.TEST_USERNAME }} # Example using secrets
            TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }} # Example using secrets
            # Or use the hardcoded values if secrets are not set up (less secure)
            #TEST_USERNAME: "rockwell.automation.1@gmx.com"
            #TEST_PASSWORD: ""

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: always() # Run even if previous steps fail
        with:
          name: test-logs-${{ github.event.inputs.url_index }} # Add URL index to artifact name
          path: reports/logs/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always() # Run even if previous steps fail
        with:
          name: test-screenshots-${{ github.event.inputs.url_index }} # Add URL index to artifact name
          path: reports/screenshots/
          retention-days: 7

